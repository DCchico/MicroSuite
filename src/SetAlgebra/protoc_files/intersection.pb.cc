// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: intersection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "intersection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace intersection {
class UtilRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilRequest> {
} _UtilRequest_default_instance_;
class IntersectionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IntersectionRequest> {
} _IntersectionRequest_default_instance_;
class TimingDataInMicroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimingDataInMicro> {
} _TimingDataInMicro_default_instance_;
class UtilResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilResponse> {
} _UtilResponse_default_instance_;
class IntersectionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IntersectionResponse> {
} _IntersectionResponse_default_instance_;

namespace protobuf_intersection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, word_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, intersection_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, shard_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, util_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionRequest, index_view_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, unpack_intersection_srv_req_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, calculate_intersection_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, pack_intersection_srv_resp_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, cpu_util_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, util_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, user_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, system_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, io_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, idle_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, doc_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, timing_data_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, util_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, recv_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, send_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, index_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntersectionResponse, request_server_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UtilRequest)},
  { 5, -1, sizeof(IntersectionRequest)},
  { 15, -1, sizeof(TimingDataInMicro)},
  { 23, -1, sizeof(UtilResponse)},
  { 32, -1, sizeof(IntersectionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IntersectionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimingDataInMicro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IntersectionResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "intersection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _UtilRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _IntersectionRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TimingDataInMicro_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UtilResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _IntersectionResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UtilRequest_default_instance_.DefaultConstruct();
  _IntersectionRequest_default_instance_.DefaultConstruct();
  _TimingDataInMicro_default_instance_.DefaultConstruct();
  _UtilResponse_default_instance_.DefaultConstruct();
  _IntersectionResponse_default_instance_.DefaultConstruct();
  _IntersectionRequest_default_instance_.get_mutable()->util_request_ = const_cast< ::intersection::UtilRequest*>(
      ::intersection::UtilRequest::internal_default_instance());
  _IntersectionResponse_default_instance_.get_mutable()->timing_data_in_micro_ = const_cast< ::intersection::TimingDataInMicro*>(
      ::intersection::TimingDataInMicro::internal_default_instance());
  _IntersectionResponse_default_instance_.get_mutable()->util_response_ = const_cast< ::intersection::UtilResponse*>(
      ::intersection::UtilResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022intersection.proto\022\014intersection\"#\n\013Ut"
      "ilRequest\022\024\n\014util_request\030\001 \001(\010\"\264\001\n\023Inte"
      "rsectionRequest\022\020\n\010word_ids\030\001 \003(\004\022\036\n\026int"
      "ersection_server_id\030\002 \001(\r\022\022\n\nshard_size\030"
      "\003 \001(\r\022/\n\014util_request\030\004 \001(\0132\031.intersecti"
      "on.UtilRequest\022\022\n\nrequest_id\030\005 \001(\004\022\022\n\nin"
      "dex_view\030\006 \001(\004\"\270\001\n\021TimingDataInMicro\0221\n)"
      "unpack_intersection_srv_req_time_in_micr"
      "o\030\001 \001(\004\022,\n$calculate_intersection_time_i"
      "n_micro\030\002 \001(\004\0220\n(pack_intersection_srv_r"
      "esp_time_in_micro\030\003 \001(\004\022\020\n\010cpu_util\030\004 \001("
      "\002\"p\n\014UtilResponse\022\024\n\014util_present\030\001 \001(\010\022"
      "\021\n\tuser_time\030\002 \001(\004\022\023\n\013system_time\030\003 \001(\004\022"
      "\017\n\007io_time\030\004 \001(\004\022\021\n\tidle_time\030\005 \001(\004\"\204\002\n\024"
      "IntersectionResponse\022\017\n\007doc_ids\030\001 \003(\004\022=\n"
      "\024timing_data_in_micro\030\002 \001(\0132\037.intersecti"
      "on.TimingDataInMicro\0221\n\rutil_response\030\003 "
      "\001(\0132\032.intersection.UtilResponse\022\022\n\nreque"
      "st_id\030\004 \001(\004\022\022\n\nrecv_stamp\030\005 \001(\004\022\022\n\nsend_"
      "stamp\030\006 \001(\004\022\022\n\nindex_view\030\007 \001(\004\022\031\n\021reque"
      "st_server_id\030\010 \001(\r2n\n\023IntersectionServic"
      "e\022W\n\014Intersection\022!.intersection.Interse"
      "ctionRequest\032\".intersection.Intersection"
      "Response\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 938);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "intersection.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_intersection_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilRequest::kUtilRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilRequest::UtilRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_intersection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:intersection.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:intersection.UtilRequest)
}

void UtilRequest::SharedCtor() {
  util_request_ = false;
  _cached_size_ = 0;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:intersection.UtilRequest)
  SharedDtor();
}

void UtilRequest::SharedDtor() {
}

void UtilRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilRequest::descriptor() {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[0].descriptor;
}

const UtilRequest& UtilRequest::default_instance() {
  protobuf_intersection_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilRequest* UtilRequest::New(::google::protobuf::Arena* arena) const {
  UtilRequest* n = new UtilRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:intersection.UtilRequest)
  util_request_ = false;
}

bool UtilRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:intersection.UtilRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_request = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:intersection.UtilRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:intersection.UtilRequest)
  return false;
#undef DO_
}

void UtilRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:intersection.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_request(), output);
  }

  // @@protoc_insertion_point(serialize_end:intersection.UtilRequest)
}

::google::protobuf::uint8* UtilRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:intersection.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:intersection.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:intersection.UtilRequest)
  size_t total_size = 0;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:intersection.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:intersection.UtilRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:intersection.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:intersection.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.util_request() != 0) {
    set_util_request(from.util_request());
  }
}

void UtilRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:intersection.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:intersection.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::Swap(UtilRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilRequest::InternalSwap(UtilRequest* other) {
  std::swap(util_request_, other->util_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilRequest::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilRequest

// bool util_request = 1;
void UtilRequest::clear_util_request() {
  util_request_ = false;
}
bool UtilRequest::util_request() const {
  // @@protoc_insertion_point(field_get:intersection.UtilRequest.util_request)
  return util_request_;
}
void UtilRequest::set_util_request(bool value) {
  
  util_request_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilRequest.util_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntersectionRequest::kWordIdsFieldNumber;
const int IntersectionRequest::kIntersectionServerIdFieldNumber;
const int IntersectionRequest::kShardSizeFieldNumber;
const int IntersectionRequest::kUtilRequestFieldNumber;
const int IntersectionRequest::kRequestIdFieldNumber;
const int IntersectionRequest::kIndexViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntersectionRequest::IntersectionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_intersection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:intersection.IntersectionRequest)
}
IntersectionRequest::IntersectionRequest(const IntersectionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      word_ids_(from.word_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_util_request()) {
    util_request_ = new ::intersection::UtilRequest(*from.util_request_);
  } else {
    util_request_ = NULL;
  }
  ::memcpy(&intersection_server_id_, &from.intersection_server_id_,
    reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&intersection_server_id_) + sizeof(index_view_));
  // @@protoc_insertion_point(copy_constructor:intersection.IntersectionRequest)
}

void IntersectionRequest::SharedCtor() {
  ::memset(&util_request_, 0, reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&util_request_) + sizeof(index_view_));
  _cached_size_ = 0;
}

IntersectionRequest::~IntersectionRequest() {
  // @@protoc_insertion_point(destructor:intersection.IntersectionRequest)
  SharedDtor();
}

void IntersectionRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete util_request_;
  }
}

void IntersectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntersectionRequest::descriptor() {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[1].descriptor;
}

const IntersectionRequest& IntersectionRequest::default_instance() {
  protobuf_intersection_2eproto::InitDefaults();
  return *internal_default_instance();
}

IntersectionRequest* IntersectionRequest::New(::google::protobuf::Arena* arena) const {
  IntersectionRequest* n = new IntersectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntersectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:intersection.IntersectionRequest)
  word_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) {
    delete util_request_;
  }
  util_request_ = NULL;
  ::memset(&intersection_server_id_, 0, reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&intersection_server_id_) + sizeof(index_view_));
}

bool IntersectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:intersection.IntersectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 word_ids = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_word_ids())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_word_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 intersection_server_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intersection_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shard_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .intersection.UtilRequest util_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index_view = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:intersection.IntersectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:intersection.IntersectionRequest)
  return false;
#undef DO_
}

void IntersectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:intersection.IntersectionRequest)
  // repeated uint64 word_ids = 1;
  if (this->word_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_word_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->word_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->word_ids(i), output);
  }

  // uint32 intersection_server_id = 2;
  if (this->intersection_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intersection_server_id(), output);
  }

  // uint32 shard_size = 3;
  if (this->shard_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard_size(), output);
  }

  // .intersection.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->util_request_, output);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->request_id(), output);
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index_view(), output);
  }

  // @@protoc_insertion_point(serialize_end:intersection.IntersectionRequest)
}

::google::protobuf::uint8* IntersectionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:intersection.IntersectionRequest)
  // repeated uint64 word_ids = 1;
  if (this->word_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _word_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->word_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->word_ids(i), target);
  }

  // uint32 intersection_server_id = 2;
  if (this->intersection_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intersection_server_id(), target);
  }

  // uint32 shard_size = 3;
  if (this->shard_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard_size(), target);
  }

  // .intersection.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->util_request_, false, target);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->request_id(), target);
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index_view(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:intersection.IntersectionRequest)
  return target;
}

size_t IntersectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:intersection.IntersectionRequest)
  size_t total_size = 0;

  // repeated uint64 word_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->word_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _word_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .intersection.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_request_);
  }

  // uint32 intersection_server_id = 2;
  if (this->intersection_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intersection_server_id());
  }

  // uint32 shard_size = 3;
  if (this->shard_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard_size());
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_view());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntersectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:intersection.IntersectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IntersectionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntersectionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:intersection.IntersectionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:intersection.IntersectionRequest)
    MergeFrom(*source);
  }
}

void IntersectionRequest::MergeFrom(const IntersectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:intersection.IntersectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_ids_.MergeFrom(from.word_ids_);
  if (from.has_util_request()) {
    mutable_util_request()->::intersection::UtilRequest::MergeFrom(from.util_request());
  }
  if (from.intersection_server_id() != 0) {
    set_intersection_server_id(from.intersection_server_id());
  }
  if (from.shard_size() != 0) {
    set_shard_size(from.shard_size());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.index_view() != 0) {
    set_index_view(from.index_view());
  }
}

void IntersectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:intersection.IntersectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntersectionRequest::CopyFrom(const IntersectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:intersection.IntersectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionRequest::IsInitialized() const {
  return true;
}

void IntersectionRequest::Swap(IntersectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntersectionRequest::InternalSwap(IntersectionRequest* other) {
  word_ids_.UnsafeArenaSwap(&other->word_ids_);
  std::swap(util_request_, other->util_request_);
  std::swap(intersection_server_id_, other->intersection_server_id_);
  std::swap(shard_size_, other->shard_size_);
  std::swap(request_id_, other->request_id_);
  std::swap(index_view_, other->index_view_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntersectionRequest::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntersectionRequest

// repeated uint64 word_ids = 1;
int IntersectionRequest::word_ids_size() const {
  return word_ids_.size();
}
void IntersectionRequest::clear_word_ids() {
  word_ids_.Clear();
}
::google::protobuf::uint64 IntersectionRequest::word_ids(int index) const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.word_ids)
  return word_ids_.Get(index);
}
void IntersectionRequest::set_word_ids(int index, ::google::protobuf::uint64 value) {
  word_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:intersection.IntersectionRequest.word_ids)
}
void IntersectionRequest::add_word_ids(::google::protobuf::uint64 value) {
  word_ids_.Add(value);
  // @@protoc_insertion_point(field_add:intersection.IntersectionRequest.word_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
IntersectionRequest::word_ids() const {
  // @@protoc_insertion_point(field_list:intersection.IntersectionRequest.word_ids)
  return word_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
IntersectionRequest::mutable_word_ids() {
  // @@protoc_insertion_point(field_mutable_list:intersection.IntersectionRequest.word_ids)
  return &word_ids_;
}

// uint32 intersection_server_id = 2;
void IntersectionRequest::clear_intersection_server_id() {
  intersection_server_id_ = 0u;
}
::google::protobuf::uint32 IntersectionRequest::intersection_server_id() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.intersection_server_id)
  return intersection_server_id_;
}
void IntersectionRequest::set_intersection_server_id(::google::protobuf::uint32 value) {
  
  intersection_server_id_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionRequest.intersection_server_id)
}

// uint32 shard_size = 3;
void IntersectionRequest::clear_shard_size() {
  shard_size_ = 0u;
}
::google::protobuf::uint32 IntersectionRequest::shard_size() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.shard_size)
  return shard_size_;
}
void IntersectionRequest::set_shard_size(::google::protobuf::uint32 value) {
  
  shard_size_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionRequest.shard_size)
}

// .intersection.UtilRequest util_request = 4;
bool IntersectionRequest::has_util_request() const {
  return this != internal_default_instance() && util_request_ != NULL;
}
void IntersectionRequest::clear_util_request() {
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) delete util_request_;
  util_request_ = NULL;
}
const ::intersection::UtilRequest& IntersectionRequest::util_request() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.util_request)
  return util_request_ != NULL ? *util_request_
                         : *::intersection::UtilRequest::internal_default_instance();
}
::intersection::UtilRequest* IntersectionRequest::mutable_util_request() {
  
  if (util_request_ == NULL) {
    util_request_ = new ::intersection::UtilRequest;
  }
  // @@protoc_insertion_point(field_mutable:intersection.IntersectionRequest.util_request)
  return util_request_;
}
::intersection::UtilRequest* IntersectionRequest::release_util_request() {
  // @@protoc_insertion_point(field_release:intersection.IntersectionRequest.util_request)
  
  ::intersection::UtilRequest* temp = util_request_;
  util_request_ = NULL;
  return temp;
}
void IntersectionRequest::set_allocated_util_request(::intersection::UtilRequest* util_request) {
  delete util_request_;
  util_request_ = util_request;
  if (util_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:intersection.IntersectionRequest.util_request)
}

// uint64 request_id = 5;
void IntersectionRequest::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionRequest::request_id() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.request_id)
  return request_id_;
}
void IntersectionRequest::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionRequest.request_id)
}

// uint64 index_view = 6;
void IntersectionRequest::clear_index_view() {
  index_view_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionRequest::index_view() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionRequest.index_view)
  return index_view_;
}
void IntersectionRequest::set_index_view(::google::protobuf::uint64 value) {
  
  index_view_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionRequest.index_view)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimingDataInMicro::kUnpackIntersectionSrvReqTimeInMicroFieldNumber;
const int TimingDataInMicro::kCalculateIntersectionTimeInMicroFieldNumber;
const int TimingDataInMicro::kPackIntersectionSrvRespTimeInMicroFieldNumber;
const int TimingDataInMicro::kCpuUtilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimingDataInMicro::TimingDataInMicro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_intersection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:intersection.TimingDataInMicro)
}
TimingDataInMicro::TimingDataInMicro(const TimingDataInMicro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unpack_intersection_srv_req_time_in_micro_, &from.unpack_intersection_srv_req_time_in_micro_,
    reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_intersection_srv_req_time_in_micro_) + sizeof(cpu_util_));
  // @@protoc_insertion_point(copy_constructor:intersection.TimingDataInMicro)
}

void TimingDataInMicro::SharedCtor() {
  ::memset(&unpack_intersection_srv_req_time_in_micro_, 0, reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_intersection_srv_req_time_in_micro_) + sizeof(cpu_util_));
  _cached_size_ = 0;
}

TimingDataInMicro::~TimingDataInMicro() {
  // @@protoc_insertion_point(destructor:intersection.TimingDataInMicro)
  SharedDtor();
}

void TimingDataInMicro::SharedDtor() {
}

void TimingDataInMicro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimingDataInMicro::descriptor() {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[2].descriptor;
}

const TimingDataInMicro& TimingDataInMicro::default_instance() {
  protobuf_intersection_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimingDataInMicro* TimingDataInMicro::New(::google::protobuf::Arena* arena) const {
  TimingDataInMicro* n = new TimingDataInMicro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimingDataInMicro::Clear() {
// @@protoc_insertion_point(message_clear_start:intersection.TimingDataInMicro)
  ::memset(&unpack_intersection_srv_req_time_in_micro_, 0, reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_intersection_srv_req_time_in_micro_) + sizeof(cpu_util_));
}

bool TimingDataInMicro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:intersection.TimingDataInMicro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 unpack_intersection_srv_req_time_in_micro = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unpack_intersection_srv_req_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 calculate_intersection_time_in_micro = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &calculate_intersection_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pack_intersection_srv_resp_time_in_micro = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pack_intersection_srv_resp_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_util = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_util_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:intersection.TimingDataInMicro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:intersection.TimingDataInMicro)
  return false;
#undef DO_
}

void TimingDataInMicro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:intersection.TimingDataInMicro)
  // uint64 unpack_intersection_srv_req_time_in_micro = 1;
  if (this->unpack_intersection_srv_req_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unpack_intersection_srv_req_time_in_micro(), output);
  }

  // uint64 calculate_intersection_time_in_micro = 2;
  if (this->calculate_intersection_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->calculate_intersection_time_in_micro(), output);
  }

  // uint64 pack_intersection_srv_resp_time_in_micro = 3;
  if (this->pack_intersection_srv_resp_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pack_intersection_srv_resp_time_in_micro(), output);
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cpu_util(), output);
  }

  // @@protoc_insertion_point(serialize_end:intersection.TimingDataInMicro)
}

::google::protobuf::uint8* TimingDataInMicro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:intersection.TimingDataInMicro)
  // uint64 unpack_intersection_srv_req_time_in_micro = 1;
  if (this->unpack_intersection_srv_req_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unpack_intersection_srv_req_time_in_micro(), target);
  }

  // uint64 calculate_intersection_time_in_micro = 2;
  if (this->calculate_intersection_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->calculate_intersection_time_in_micro(), target);
  }

  // uint64 pack_intersection_srv_resp_time_in_micro = 3;
  if (this->pack_intersection_srv_resp_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pack_intersection_srv_resp_time_in_micro(), target);
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cpu_util(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:intersection.TimingDataInMicro)
  return target;
}

size_t TimingDataInMicro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:intersection.TimingDataInMicro)
  size_t total_size = 0;

  // uint64 unpack_intersection_srv_req_time_in_micro = 1;
  if (this->unpack_intersection_srv_req_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unpack_intersection_srv_req_time_in_micro());
  }

  // uint64 calculate_intersection_time_in_micro = 2;
  if (this->calculate_intersection_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->calculate_intersection_time_in_micro());
  }

  // uint64 pack_intersection_srv_resp_time_in_micro = 3;
  if (this->pack_intersection_srv_resp_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pack_intersection_srv_resp_time_in_micro());
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingDataInMicro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:intersection.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingDataInMicro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimingDataInMicro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:intersection.TimingDataInMicro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:intersection.TimingDataInMicro)
    MergeFrom(*source);
  }
}

void TimingDataInMicro::MergeFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:intersection.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.unpack_intersection_srv_req_time_in_micro() != 0) {
    set_unpack_intersection_srv_req_time_in_micro(from.unpack_intersection_srv_req_time_in_micro());
  }
  if (from.calculate_intersection_time_in_micro() != 0) {
    set_calculate_intersection_time_in_micro(from.calculate_intersection_time_in_micro());
  }
  if (from.pack_intersection_srv_resp_time_in_micro() != 0) {
    set_pack_intersection_srv_resp_time_in_micro(from.pack_intersection_srv_resp_time_in_micro());
  }
  if (from.cpu_util() != 0) {
    set_cpu_util(from.cpu_util());
  }
}

void TimingDataInMicro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:intersection.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingDataInMicro::CopyFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:intersection.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingDataInMicro::IsInitialized() const {
  return true;
}

void TimingDataInMicro::Swap(TimingDataInMicro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimingDataInMicro::InternalSwap(TimingDataInMicro* other) {
  std::swap(unpack_intersection_srv_req_time_in_micro_, other->unpack_intersection_srv_req_time_in_micro_);
  std::swap(calculate_intersection_time_in_micro_, other->calculate_intersection_time_in_micro_);
  std::swap(pack_intersection_srv_resp_time_in_micro_, other->pack_intersection_srv_resp_time_in_micro_);
  std::swap(cpu_util_, other->cpu_util_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimingDataInMicro::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimingDataInMicro

// uint64 unpack_intersection_srv_req_time_in_micro = 1;
void TimingDataInMicro::clear_unpack_intersection_srv_req_time_in_micro() {
  unpack_intersection_srv_req_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::unpack_intersection_srv_req_time_in_micro() const {
  // @@protoc_insertion_point(field_get:intersection.TimingDataInMicro.unpack_intersection_srv_req_time_in_micro)
  return unpack_intersection_srv_req_time_in_micro_;
}
void TimingDataInMicro::set_unpack_intersection_srv_req_time_in_micro(::google::protobuf::uint64 value) {
  
  unpack_intersection_srv_req_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:intersection.TimingDataInMicro.unpack_intersection_srv_req_time_in_micro)
}

// uint64 calculate_intersection_time_in_micro = 2;
void TimingDataInMicro::clear_calculate_intersection_time_in_micro() {
  calculate_intersection_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::calculate_intersection_time_in_micro() const {
  // @@protoc_insertion_point(field_get:intersection.TimingDataInMicro.calculate_intersection_time_in_micro)
  return calculate_intersection_time_in_micro_;
}
void TimingDataInMicro::set_calculate_intersection_time_in_micro(::google::protobuf::uint64 value) {
  
  calculate_intersection_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:intersection.TimingDataInMicro.calculate_intersection_time_in_micro)
}

// uint64 pack_intersection_srv_resp_time_in_micro = 3;
void TimingDataInMicro::clear_pack_intersection_srv_resp_time_in_micro() {
  pack_intersection_srv_resp_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::pack_intersection_srv_resp_time_in_micro() const {
  // @@protoc_insertion_point(field_get:intersection.TimingDataInMicro.pack_intersection_srv_resp_time_in_micro)
  return pack_intersection_srv_resp_time_in_micro_;
}
void TimingDataInMicro::set_pack_intersection_srv_resp_time_in_micro(::google::protobuf::uint64 value) {
  
  pack_intersection_srv_resp_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:intersection.TimingDataInMicro.pack_intersection_srv_resp_time_in_micro)
}

// float cpu_util = 4;
void TimingDataInMicro::clear_cpu_util() {
  cpu_util_ = 0;
}
float TimingDataInMicro::cpu_util() const {
  // @@protoc_insertion_point(field_get:intersection.TimingDataInMicro.cpu_util)
  return cpu_util_;
}
void TimingDataInMicro::set_cpu_util(float value) {
  
  cpu_util_ = value;
  // @@protoc_insertion_point(field_set:intersection.TimingDataInMicro.cpu_util)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilResponse::kUtilPresentFieldNumber;
const int UtilResponse::kUserTimeFieldNumber;
const int UtilResponse::kSystemTimeFieldNumber;
const int UtilResponse::kIoTimeFieldNumber;
const int UtilResponse::kIdleTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilResponse::UtilResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_intersection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:intersection.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
  // @@protoc_insertion_point(copy_constructor:intersection.UtilResponse)
}

void UtilResponse::SharedCtor() {
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
  _cached_size_ = 0;
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:intersection.UtilResponse)
  SharedDtor();
}

void UtilResponse::SharedDtor() {
}

void UtilResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilResponse::descriptor() {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[3].descriptor;
}

const UtilResponse& UtilResponse::default_instance() {
  protobuf_intersection_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilResponse* UtilResponse::New(::google::protobuf::Arena* arena) const {
  UtilResponse* n = new UtilResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:intersection.UtilResponse)
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
}

bool UtilResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:intersection.UtilResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_present = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 system_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 io_time = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &io_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 idle_time = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:intersection.UtilResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:intersection.UtilResponse)
  return false;
#undef DO_
}

void UtilResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:intersection.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_present(), output);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_time(), output);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->system_time(), output);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->io_time(), output);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->idle_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:intersection.UtilResponse)
}

::google::protobuf::uint8* UtilResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:intersection.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_present(), target);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_time(), target);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->system_time(), target);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->io_time(), target);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->idle_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:intersection.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:intersection.UtilResponse)
  size_t total_size = 0;

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_time());
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->system_time());
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->io_time());
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idle_time());
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:intersection.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:intersection.UtilResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:intersection.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:intersection.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user_time() != 0) {
    set_user_time(from.user_time());
  }
  if (from.system_time() != 0) {
    set_system_time(from.system_time());
  }
  if (from.io_time() != 0) {
    set_io_time(from.io_time());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.util_present() != 0) {
    set_util_present(from.util_present());
  }
}

void UtilResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:intersection.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:intersection.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::Swap(UtilResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilResponse::InternalSwap(UtilResponse* other) {
  std::swap(user_time_, other->user_time_);
  std::swap(system_time_, other->system_time_);
  std::swap(io_time_, other->io_time_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(util_present_, other->util_present_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilResponse::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilResponse

// bool util_present = 1;
void UtilResponse::clear_util_present() {
  util_present_ = false;
}
bool UtilResponse::util_present() const {
  // @@protoc_insertion_point(field_get:intersection.UtilResponse.util_present)
  return util_present_;
}
void UtilResponse::set_util_present(bool value) {
  
  util_present_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilResponse.util_present)
}

// uint64 user_time = 2;
void UtilResponse::clear_user_time() {
  user_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::user_time() const {
  // @@protoc_insertion_point(field_get:intersection.UtilResponse.user_time)
  return user_time_;
}
void UtilResponse::set_user_time(::google::protobuf::uint64 value) {
  
  user_time_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilResponse.user_time)
}

// uint64 system_time = 3;
void UtilResponse::clear_system_time() {
  system_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::system_time() const {
  // @@protoc_insertion_point(field_get:intersection.UtilResponse.system_time)
  return system_time_;
}
void UtilResponse::set_system_time(::google::protobuf::uint64 value) {
  
  system_time_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilResponse.system_time)
}

// uint64 io_time = 4;
void UtilResponse::clear_io_time() {
  io_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::io_time() const {
  // @@protoc_insertion_point(field_get:intersection.UtilResponse.io_time)
  return io_time_;
}
void UtilResponse::set_io_time(::google::protobuf::uint64 value) {
  
  io_time_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilResponse.io_time)
}

// uint64 idle_time = 5;
void UtilResponse::clear_idle_time() {
  idle_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::idle_time() const {
  // @@protoc_insertion_point(field_get:intersection.UtilResponse.idle_time)
  return idle_time_;
}
void UtilResponse::set_idle_time(::google::protobuf::uint64 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:intersection.UtilResponse.idle_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntersectionResponse::kDocIdsFieldNumber;
const int IntersectionResponse::kTimingDataInMicroFieldNumber;
const int IntersectionResponse::kUtilResponseFieldNumber;
const int IntersectionResponse::kRequestIdFieldNumber;
const int IntersectionResponse::kRecvStampFieldNumber;
const int IntersectionResponse::kSendStampFieldNumber;
const int IntersectionResponse::kIndexViewFieldNumber;
const int IntersectionResponse::kRequestServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntersectionResponse::IntersectionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_intersection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:intersection.IntersectionResponse)
}
IntersectionResponse::IntersectionResponse(const IntersectionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      doc_ids_(from.doc_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timing_data_in_micro()) {
    timing_data_in_micro_ = new ::intersection::TimingDataInMicro(*from.timing_data_in_micro_);
  } else {
    timing_data_in_micro_ = NULL;
  }
  if (from.has_util_response()) {
    util_response_ = new ::intersection::UtilResponse(*from.util_response_);
  } else {
    util_response_ = NULL;
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&request_server_id_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_server_id_));
  // @@protoc_insertion_point(copy_constructor:intersection.IntersectionResponse)
}

void IntersectionResponse::SharedCtor() {
  ::memset(&timing_data_in_micro_, 0, reinterpret_cast<char*>(&request_server_id_) -
    reinterpret_cast<char*>(&timing_data_in_micro_) + sizeof(request_server_id_));
  _cached_size_ = 0;
}

IntersectionResponse::~IntersectionResponse() {
  // @@protoc_insertion_point(destructor:intersection.IntersectionResponse)
  SharedDtor();
}

void IntersectionResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete timing_data_in_micro_;
  }
  if (this != internal_default_instance()) {
    delete util_response_;
  }
}

void IntersectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntersectionResponse::descriptor() {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[4].descriptor;
}

const IntersectionResponse& IntersectionResponse::default_instance() {
  protobuf_intersection_2eproto::InitDefaults();
  return *internal_default_instance();
}

IntersectionResponse* IntersectionResponse::New(::google::protobuf::Arena* arena) const {
  IntersectionResponse* n = new IntersectionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntersectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:intersection.IntersectionResponse)
  doc_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && timing_data_in_micro_ != NULL) {
    delete timing_data_in_micro_;
  }
  timing_data_in_micro_ = NULL;
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) {
    delete util_response_;
  }
  util_response_ = NULL;
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&request_server_id_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_server_id_));
}

bool IntersectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:intersection.IntersectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 doc_ids = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_doc_ids())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_doc_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .intersection.TimingDataInMicro timing_data_in_micro = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timing_data_in_micro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .intersection.UtilResponse util_response = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 recv_stamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recv_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 send_stamp = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index_view = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 request_server_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:intersection.IntersectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:intersection.IntersectionResponse)
  return false;
#undef DO_
}

void IntersectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:intersection.IntersectionResponse)
  // repeated uint64 doc_ids = 1;
  if (this->doc_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_doc_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->doc_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->doc_ids(i), output);
  }

  // .intersection.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timing_data_in_micro_, output);
  }

  // .intersection.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->util_response_, output);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->request_id(), output);
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recv_stamp(), output);
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->send_stamp(), output);
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->index_view(), output);
  }

  // uint32 request_server_id = 8;
  if (this->request_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->request_server_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:intersection.IntersectionResponse)
}

::google::protobuf::uint8* IntersectionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:intersection.IntersectionResponse)
  // repeated uint64 doc_ids = 1;
  if (this->doc_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _doc_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->doc_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->doc_ids(i), target);
  }

  // .intersection.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timing_data_in_micro_, false, target);
  }

  // .intersection.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->util_response_, false, target);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->request_id(), target);
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recv_stamp(), target);
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->send_stamp(), target);
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->index_view(), target);
  }

  // uint32 request_server_id = 8;
  if (this->request_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->request_server_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:intersection.IntersectionResponse)
  return target;
}

size_t IntersectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:intersection.IntersectionResponse)
  size_t total_size = 0;

  // repeated uint64 doc_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->doc_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _doc_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .intersection.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timing_data_in_micro_);
  }

  // .intersection.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_response_);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->recv_stamp());
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_stamp());
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_view());
  }

  // uint32 request_server_id = 8;
  if (this->request_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntersectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:intersection.IntersectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IntersectionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntersectionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:intersection.IntersectionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:intersection.IntersectionResponse)
    MergeFrom(*source);
  }
}

void IntersectionResponse::MergeFrom(const IntersectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:intersection.IntersectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doc_ids_.MergeFrom(from.doc_ids_);
  if (from.has_timing_data_in_micro()) {
    mutable_timing_data_in_micro()->::intersection::TimingDataInMicro::MergeFrom(from.timing_data_in_micro());
  }
  if (from.has_util_response()) {
    mutable_util_response()->::intersection::UtilResponse::MergeFrom(from.util_response());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.recv_stamp() != 0) {
    set_recv_stamp(from.recv_stamp());
  }
  if (from.send_stamp() != 0) {
    set_send_stamp(from.send_stamp());
  }
  if (from.index_view() != 0) {
    set_index_view(from.index_view());
  }
  if (from.request_server_id() != 0) {
    set_request_server_id(from.request_server_id());
  }
}

void IntersectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:intersection.IntersectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntersectionResponse::CopyFrom(const IntersectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:intersection.IntersectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionResponse::IsInitialized() const {
  return true;
}

void IntersectionResponse::Swap(IntersectionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntersectionResponse::InternalSwap(IntersectionResponse* other) {
  doc_ids_.UnsafeArenaSwap(&other->doc_ids_);
  std::swap(timing_data_in_micro_, other->timing_data_in_micro_);
  std::swap(util_response_, other->util_response_);
  std::swap(request_id_, other->request_id_);
  std::swap(recv_stamp_, other->recv_stamp_);
  std::swap(send_stamp_, other->send_stamp_);
  std::swap(index_view_, other->index_view_);
  std::swap(request_server_id_, other->request_server_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntersectionResponse::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_intersection_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntersectionResponse

// repeated uint64 doc_ids = 1;
int IntersectionResponse::doc_ids_size() const {
  return doc_ids_.size();
}
void IntersectionResponse::clear_doc_ids() {
  doc_ids_.Clear();
}
::google::protobuf::uint64 IntersectionResponse::doc_ids(int index) const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.doc_ids)
  return doc_ids_.Get(index);
}
void IntersectionResponse::set_doc_ids(int index, ::google::protobuf::uint64 value) {
  doc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.doc_ids)
}
void IntersectionResponse::add_doc_ids(::google::protobuf::uint64 value) {
  doc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:intersection.IntersectionResponse.doc_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
IntersectionResponse::doc_ids() const {
  // @@protoc_insertion_point(field_list:intersection.IntersectionResponse.doc_ids)
  return doc_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
IntersectionResponse::mutable_doc_ids() {
  // @@protoc_insertion_point(field_mutable_list:intersection.IntersectionResponse.doc_ids)
  return &doc_ids_;
}

// .intersection.TimingDataInMicro timing_data_in_micro = 2;
bool IntersectionResponse::has_timing_data_in_micro() const {
  return this != internal_default_instance() && timing_data_in_micro_ != NULL;
}
void IntersectionResponse::clear_timing_data_in_micro() {
  if (GetArenaNoVirtual() == NULL && timing_data_in_micro_ != NULL) delete timing_data_in_micro_;
  timing_data_in_micro_ = NULL;
}
const ::intersection::TimingDataInMicro& IntersectionResponse::timing_data_in_micro() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.timing_data_in_micro)
  return timing_data_in_micro_ != NULL ? *timing_data_in_micro_
                         : *::intersection::TimingDataInMicro::internal_default_instance();
}
::intersection::TimingDataInMicro* IntersectionResponse::mutable_timing_data_in_micro() {
  
  if (timing_data_in_micro_ == NULL) {
    timing_data_in_micro_ = new ::intersection::TimingDataInMicro;
  }
  // @@protoc_insertion_point(field_mutable:intersection.IntersectionResponse.timing_data_in_micro)
  return timing_data_in_micro_;
}
::intersection::TimingDataInMicro* IntersectionResponse::release_timing_data_in_micro() {
  // @@protoc_insertion_point(field_release:intersection.IntersectionResponse.timing_data_in_micro)
  
  ::intersection::TimingDataInMicro* temp = timing_data_in_micro_;
  timing_data_in_micro_ = NULL;
  return temp;
}
void IntersectionResponse::set_allocated_timing_data_in_micro(::intersection::TimingDataInMicro* timing_data_in_micro) {
  delete timing_data_in_micro_;
  timing_data_in_micro_ = timing_data_in_micro;
  if (timing_data_in_micro) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:intersection.IntersectionResponse.timing_data_in_micro)
}

// .intersection.UtilResponse util_response = 3;
bool IntersectionResponse::has_util_response() const {
  return this != internal_default_instance() && util_response_ != NULL;
}
void IntersectionResponse::clear_util_response() {
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) delete util_response_;
  util_response_ = NULL;
}
const ::intersection::UtilResponse& IntersectionResponse::util_response() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.util_response)
  return util_response_ != NULL ? *util_response_
                         : *::intersection::UtilResponse::internal_default_instance();
}
::intersection::UtilResponse* IntersectionResponse::mutable_util_response() {
  
  if (util_response_ == NULL) {
    util_response_ = new ::intersection::UtilResponse;
  }
  // @@protoc_insertion_point(field_mutable:intersection.IntersectionResponse.util_response)
  return util_response_;
}
::intersection::UtilResponse* IntersectionResponse::release_util_response() {
  // @@protoc_insertion_point(field_release:intersection.IntersectionResponse.util_response)
  
  ::intersection::UtilResponse* temp = util_response_;
  util_response_ = NULL;
  return temp;
}
void IntersectionResponse::set_allocated_util_response(::intersection::UtilResponse* util_response) {
  delete util_response_;
  util_response_ = util_response;
  if (util_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:intersection.IntersectionResponse.util_response)
}

// uint64 request_id = 4;
void IntersectionResponse::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionResponse::request_id() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.request_id)
  return request_id_;
}
void IntersectionResponse::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.request_id)
}

// uint64 recv_stamp = 5;
void IntersectionResponse::clear_recv_stamp() {
  recv_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionResponse::recv_stamp() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.recv_stamp)
  return recv_stamp_;
}
void IntersectionResponse::set_recv_stamp(::google::protobuf::uint64 value) {
  
  recv_stamp_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.recv_stamp)
}

// uint64 send_stamp = 6;
void IntersectionResponse::clear_send_stamp() {
  send_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionResponse::send_stamp() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.send_stamp)
  return send_stamp_;
}
void IntersectionResponse::set_send_stamp(::google::protobuf::uint64 value) {
  
  send_stamp_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.send_stamp)
}

// uint64 index_view = 7;
void IntersectionResponse::clear_index_view() {
  index_view_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IntersectionResponse::index_view() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.index_view)
  return index_view_;
}
void IntersectionResponse::set_index_view(::google::protobuf::uint64 value) {
  
  index_view_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.index_view)
}

// uint32 request_server_id = 8;
void IntersectionResponse::clear_request_server_id() {
  request_server_id_ = 0u;
}
::google::protobuf::uint32 IntersectionResponse::request_server_id() const {
  // @@protoc_insertion_point(field_get:intersection.IntersectionResponse.request_server_id)
  return request_server_id_;
}
void IntersectionResponse::set_request_server_id(::google::protobuf::uint32 value) {
  
  request_server_id_ = value;
  // @@protoc_insertion_point(field_set:intersection.IntersectionResponse.request_server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace intersection

// @@protoc_insertion_point(global_scope)
