// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: intersection.proto

#include "intersection.pb.h"
#include "intersection.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace intersection {

static const char* IntersectionService_method_names[] = {
  "/intersection.IntersectionService/Intersection",
};

std::unique_ptr< IntersectionService::Stub> IntersectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< IntersectionService::Stub> stub(new IntersectionService::Stub(channel));
  return stub;
}

IntersectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Intersection_(IntersectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IntersectionService::Stub::Intersection(::grpc::ClientContext* context, const ::intersection::IntersectionRequest& request, ::intersection::IntersectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Intersection_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::intersection::IntersectionResponse>* IntersectionService::Stub::AsyncIntersectionRaw(::grpc::ClientContext* context, const ::intersection::IntersectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::intersection::IntersectionResponse>::Create(channel_.get(), cq, rpcmethod_Intersection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::intersection::IntersectionResponse>* IntersectionService::Stub::PrepareAsyncIntersectionRaw(::grpc::ClientContext* context, const ::intersection::IntersectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::intersection::IntersectionResponse>::Create(channel_.get(), cq, rpcmethod_Intersection_, context, request, false);
}

IntersectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntersectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntersectionService::Service, ::intersection::IntersectionRequest, ::intersection::IntersectionResponse>(
          std::mem_fn(&IntersectionService::Service::Intersection), this)));
}

IntersectionService::Service::~Service() {
}

::grpc::Status IntersectionService::Service::Intersection(::grpc::ServerContext* context, const ::intersection::IntersectionRequest* request, ::intersection::IntersectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace intersection

